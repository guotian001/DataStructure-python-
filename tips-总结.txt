1.  写算法，需要一张草稿纸，在草稿纸上弄一个具体的小例子，尽可能多的包含到信息（测试样例），
    比照着这个小例子进行编码，由具体到一般。
    不然凭空想象直接去写的话，现在境界还没到，而且也没有必要，何苦给自己加大难度呢，问题简单化，善假于物也
2.

    # 搞不清楚的时候，找张纸，清晰的画出过程，比如引用变量啦，下标变量的迭代更替啦，边界问题啦，具体的过程清晰地走一遍，这些问题都能轻易的解决
    # 一定要把变量指到哪里了搞搞清楚，因为这涉及到边界的问题，
    # 结合着个具体的小例子（将例子清晰的走一遍下来），就能轻易的将这些过程写出来，虽然如果不结合过程来看这些代码 仍然是不clear的
    # 也就是说：不论写还是看算法的代码，都最好结合个具体的小例子（测试样例），尤其当你搞不太清楚的时候
    # 由具体到一般
    # 找张草稿纸先，
3.  递归，描述出来过程（拆出来的可以看成一个同样的问题，只是规模缩小了点），定义清楚出口，然后，"bong",结果就出来了
    类似方程思想，我们把方程写出来，计算机来解方程，返回给我们答案

4. # 如果某个判断条件描述起来较麻烦的话，不如转向其对立条件，让后将该条件下的操作放在else中（一般比较麻烦的条件其对立条件可能比较简单）

5. 最笨的方法，将流程步骤用代码实现出来

6. # 对象作为参数在方法体内改变后，重新赋值一次是最保险的，不用担心值传递引起的问题。反正重新赋值一次是肯定能可以的
    eg： tree = None
        tree = insert(tree, "haha")
         # insert(tree, "haha") × ， 在方法体内改变了tree，并不能改变方法体外的tree，因为，是值传递，即仅仅是将体外的tree的值赋值给了
         方法体的形参，体内的tree是一个新的临时变量，只不过其初始值与体外的变量的值相同而已，因此，改变体内的临时变量不会影响体外的tree。

        ！！！解决方法！！： 将体内的临时变量返回出去，对体外的变量重新赋值。如tree = insert(tree, "haha")（insert中  有return tree）

7. 迭代算法：理清迭代过程，迭代过程一定要清晰，不然怎么写代码，最好是能像那些算法书上写个1、2、3。。或者像吴那样，写个伪代码（包括循环的），能搞清楚迭代过程就好
            然后就是代码实现迭代过程，然后修补边界问题


        # 迭代算法，在纸上理清迭代过程（当前所处的位置，以及迭代循环的条件是什么），然后代码实现之

        ~~~~~~~~~~# 循环的条件经常出问题，可以先写循环体，最后再   补上    循环的条件  ~~~~~~~~~

        不要小瞧了循环迭代。。。
8. 代码可以先粗糙的写出来，然后再对其进行 美化，简化，优化（该删删，该减减）

9. python中没有类似c,java那种传统的for循环< 形如for（;;）>，不过这种for循环的最自然的改写就是while了，python中可以用while来替代

10. 写算法，~~~自顶向下~~~ ，先搭框架（伪代码），把函数定义出来，然后一步步实现函数即可，类似于先写目录，提纲挈领

11. do - while 循环，有时候需要用到，代码更简洁易懂一点 do while 是有存在意义的，python中
    while True:
        # do
        if test():
            break

